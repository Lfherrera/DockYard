<.header>
  Listing Messages
  <:actions>
    <.link patch={~p"/messages/new"}>
      <.button>New Message</.button>
    </.link>
  </:actions>
</.header>

<.table
  id="messages"
  rows={@streams.messages}
  row_click={fn {_id, message} -> JS.navigate(~p"/messages/#{message}") end}
>
  <:col :let={{_id, message}} label="Content"><%= message.content %></:col>
  <:action :let={{_id, message}}>
    <div class="sr-only">
      <.link navigate={~p"/messages/#{message}"}>Show</.link>
    </div>
    <.link patch={~p"/messages/#{message}/edit"}>Edit</.link>
  </:action>
  <:action :let={{id, message}}>
    <.link
      phx-click={JS.push("delete", value: %{id: message.id}) |> hide("##{id}")}
      data-confirm="Are you sure?"
    >
      Delete
    </.link>
  </:action>
</.table>

<%!-- Phoenix.LiveComponent encapsulates the behavior of a LiveView (state, message handling, displaying html) 
into reusable components within other LiveViews.
We use the Phoenix.Component.live_component/1 to render a LiveComponent. The id and module attributes are 
required. Other attributes are bound to the socket assigns. LiveComponents do not inherit socket values 
from their parent, so socket values must be explicitly provided. --%>

<.modal :if={@live_action in [:new, :edit]} id="message-modal" show on_cancel={JS.patch(~p"/messages")}>
  <.live_component
    module={PicChatWeb.MessageLive.FormComponent}
    id={@message.id || :new}
    title={@page_title}
    action={@live_action}
    message={@message}
    patch={~p"/messages"}
  />
</.modal>
